import { Model } from "@effect/sql"
import { Schema } from "effect"

// Advanced Product model with custom field configurations
export class Product extends Model.Class<Product>("Product")({
  // Primary key - generated by database
  id: Model.Generated(Schema.Number.pipe(Schema.brand("ProductId"))),

  // Basic product information
  name: Schema.NonEmptyString,
  description: Schema.String,
  price: Schema.Number.pipe(Schema.positive()),

  // Optional fields with different behaviors
  category: Model.FieldOption(Schema.String),

  // JSON field with different representations for DB vs API
  metadata: Model.JsonFromString(
    Schema.Struct({
      tags: Schema.Array(Schema.String),
      features: Schema.Array(Schema.String),
      rating: Schema.Number.pipe(Schema.optional),
    }),
  ),

  // Boolean field for database compatibility
  isActive: Model.BooleanFromNumber,

  // Sensitive internal data
  internalNotes: Model.Sensitive(Schema.String.pipe(Schema.optional)),

  // Timestamps with different date formats
  createdAt: Model.DateTimeInsertFromDate,
  updatedAt: Model.DateTimeUpdateFromDate,
}) {}

// Blog Post model with custom field types
export class BlogPost extends Model.Class<BlogPost>("BlogPost")({
  id: Model.Generated(Schema.String.pipe(Schema.brand("PostId"))),

  title: Schema.NonEmptyString,
  content: Schema.String,
  slug: Schema.String,

  // Author reference
  authorId: Schema.Number.pipe(Schema.brand("UserId")),

  // Publication status with different field names across variants
  status: Model.fieldFromKey({
    insert: "initialStatus",
    update: "status",
    select: "status",
    json: "publishedStatus",
  })(Schema.Literal("draft", "published", "archived")),

  // JSON metadata
  seoData: Model.JsonFromString(
    Schema.Struct({
      title: Schema.String.pipe(Schema.optional),
      description: Schema.String.pipe(Schema.optional),
      keywords: Schema.Array(Schema.String),
    }),
  ),

  // Generated timestamps
  createdAt: Model.DateTimeInsert,
  updatedAt: Model.DateTimeUpdate,
  publishedAt: Model.FieldOption(Model.DateTimeFromDate),
}) {}

console.log("=== Product Model ===")
console.log("Fields with optional support:", Object.keys(Product.fields))
console.log("JSON representation:", Object.keys(Product.json.fields))

console.log("\n=== BlogPost Model ===")
console.log("Field name mapping example:")
console.log(
  "Insert variant has 'initialStatus':",
  "initialStatus" in BlogPost.insert.fields,
)
console.log("Select variant has 'status':", "status" in BlogPost.fields)
console.log(
  "JSON variant has 'publishedStatus':",
  "publishedStatus" in BlogPost.json.fields,
)

// Example data
export const createProductData = {
  name: "Gaming Laptop",
  description: "High-performance gaming laptop",
  price: 1299.99,
  category: null,
  metadata: JSON.stringify({
    tags: ["gaming", "laptop", "electronics"],
    features: ["RGB keyboard", "High refresh rate", "Powerful GPU"],
    rating: 4.5,
  }),
  isActive: 1,
  internalNotes: "Launch Q2 2024",
  createdAt: new Date().toISOString(),
  updatedAt: new Date().toISOString(),
}

export const createBlogPostData = {
  title: "Getting Started with Effect SQL",
  content: "Learn how to use the Model module...",
  slug: "getting-started-effect-sql",
  authorId: 1,
  initialStatus: "draft" as const,
  seoData: JSON.stringify({
    title: "Effect SQL Tutorial",
    description: "Complete guide to Effect SQL Model module",
    keywords: ["effect", "sql", "typescript"],
  }),
  createdAt: "2024-01-01T10:00:00Z",
  updatedAt: "2024-01-01T10:00:00Z",
  publishedAt: null,
}

console.log("\n=== Data Examples ===")
console.log("Product creation data:", Object.keys(createProductData))
console.log("Blog post creation data:", Object.keys(createBlogPostData))
